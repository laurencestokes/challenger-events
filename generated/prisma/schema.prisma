// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(COMPETITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  teams       TeamMember[]
  events      Event[]      @relation("EventAdmins")
  scores      Score[]
  invitations Invitation[] @relation("InvitedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  COMPETITOR
  VIEWER
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]
  events  Event[]
}

model TeamMember {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

enum TeamRole {
  CAPTAIN
  MEMBER
}

model Event {
  id          String      @id @default(cuid())
  name        String
  description String?
  code        String      @unique // 6-8 character alphanumeric code
  status      EventStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  admins     User[]     @relation("EventAdmins")
  teams      Team[]
  scores     Score[]
  activities Activity[]
}

enum EventStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model Activity {
  id          String       @id @default(cuid())
  eventId     String
  name        String
  description String?
  type        ActivityType
  maxScore    Float?
  unit        String? // e.g., "seconds", "reps", "lbs"
  order       Int          @default(0)
  createdAt   DateTime     @default(now())

  event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scores Score[]
}

enum ActivityType {
  TIME
  REPS
  WEIGHT
  DISTANCE
  CUSTOM
}

model Score {
  id          String   @id @default(cuid())
  userId      String
  eventId     String
  activityId  String
  value       Float
  notes       String?
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, activityId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      UserRole
  eventId   String?
  invitedBy String
  token     String   @unique
  expiresAt DateTime
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())

  invitedByUser User @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
}
